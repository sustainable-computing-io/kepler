name: Profiling Report
on: # yamllint disable-line rule:truthy
  pull_request:

# default permissions as read only
permissions: read-all

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.filter.outputs.changes }}
    steps:
      - name: checkout source
        uses: actions/checkout@v5

      - name: filter changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            changes:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - '.github/workflows/profiling.yaml'
              - 'hack/reports/profiling.sh'

  profiling:
    needs: check-changes
    if: needs.check-changes.outputs.changes == 'true'
    runs-on: self-hosted
    steps:
      # NOTE: In case of self-hosted runners, tools like docker, make, kubectl etc. are installed at the time of setting up the runner.
      # Hence, we don't need to install them as part of the job.
      - name: Checkout source
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version-file: go.mod
          cache: false

      # NOTE: Using a specific SHA of pprof as
      # the latest version of pprof requires Go 1.24 or later
      - name: Install pprof
        run: go install github.com/google/pprof@6e76a2b096b5fa52e4bb3f7f7a357bd6e6b3b7b1

      - name: Run Docker Compose services
        shell: bash
        working-directory: compose/dev
        run: |
          # Build and start kepler-dev and kepler-latest services in detach mode
          docker compose up kepler-dev kepler-latest --build -d --wait --wait-timeout 300

      - name: Run must gather
        if: always()
        shell: bash
        working-directory: compose/dev
        run: |
          echo "::group::Get Docker ps output"
          docker ps || true
          echo "::endgroup::"

          echo "::group::Get Docker compose ps output"
          docker compose ps || true
          echo "::endgroup::"

          services=$(docker compose config --services)
          for service in $services; do
            echo "::group::Get logs for $service service"
            docker compose logs $service || true
            echo "::endgroup::"
          done

          echo "::group::Fetch metrics from kepler-dev service"
          curl -s http://localhost:28283/metrics || true
          echo "::endgroup::"

          echo "::group::Fetch metrics from kepler-latest service"
          curl -s http://localhost:28284/metrics || true
          echo "::endgroup::"

      - name: Sleeping for 10 seconds
        shell: bash
        run: |
          sleep 10

      - name: Capture CPU and Memory profiling for Kepler
        run: |
          # NOTE: Setting the duration to 60 seconds
          ./hack/reports/profiling.sh capture --duration 60

      - name: Compare profiling results
        run: |
          ./hack/reports/profiling.sh compare

      - name: Upload profiling artifact
        uses: actions/upload-artifact@v5
        with:
          name: profile-artifacts-${{ github.event.pull_request.number }}
          path: ./tmp/*
          retention-days: 5 # Keep artifact for 5 days

      # NOTE: Ensure that all deployments, built images and cluster are properly cleaned up
      # to prevent residual resources
      - name: Shutdown Docker Compose services
        if: always()
        shell: bash
        working-directory: compose/dev
        run: |
          # Stop kepler-dev and kepler-latest services
          docker compose down kepler-dev kepler-latest --volumes

      - name: Cleanup Docker images
        if: always()
        shell: bash
        run: |
          docker image prune -af

  generate-comment-message:
    needs: profiling
    if: needs.profiling.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version-file: go.mod
          cache: false

      # NOTE: Using a specific SHA of pprof as
      # the latest version of pprof requires Go 1.24 or later
      - name: Install pprof
        run: go install github.com/google/pprof@6e76a2b096b5fa52e4bb3f7f7a357bd6e6b3b7b1

      - name: Download profiling artifacts
        uses: actions/download-artifact@v6
        with:
          name: profile-artifacts-${{ github.event.pull_request.number }}
          path: ./tmp

      - name: Generate comment messages
        run: |
          {
            ./hack/reports/profiling.sh output | awk 'NR >4'
            echo ""
            echo "⬇️ Download the Profiling artifacts from the [Actions Summary page](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo ""
            echo "📦 Artifact name: \`profile-artifacts-${{ github.event.pull_request.number }}\`"
            echo ""
            echo "🔧 Or use GitHub CLI to download artifacts:"
            echo "\`\`\`bash"
            echo "gh run download ${{ github.run_id }} -n profile-artifacts-${{ github.event.pull_request.number }}"
            echo "\`\`\`"
            echo ""
          } > /tmp/message-${{ github.event.pull_request.number }}.txt
      # NOTE: Uploading the message as an artifact so that PR Comment workflow can use it to
      # add comment on PR with the message.
      - name: Upload message
        uses: actions/upload-artifact@v5
        with:
          name: message
          path: /tmp/message-${{ github.event.pull_request.number }}.txt
          retention-days: 1 # Keep artifact for 1 days
